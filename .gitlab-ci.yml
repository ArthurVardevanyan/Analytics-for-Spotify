# WIP, TESTING ONLY, DO NOT DEPLOY
include:
  #- template: Security/Secret-Detection.gitlab-ci.yml
  #- template: Security/SAST.gitlab-ci.yml
  - template: Security/SAST-IaC.latest.gitlab-ci.yml

variables:
  SCAN_KUBERNETES_MANIFESTS: "true"

stages:
  - image
  - test
  - build
  - deploy

TestingImage:
  stage: image
  when: manual
  image: docker:latest
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  services:
    - name: docker:dind
      alias: docker
      command: ["--tls=false"]
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:test || true
    - docker build --network host -f docker/dockerfile --cache-from $CI_REGISTRY_IMAGE:test -t $CI_REGISTRY_IMAGE:test .
    - docker push $CI_REGISTRY_IMAGE:test

PythonTests:
  stage: test
  image: $CI_REGISTRY_IMAGE:test
  services:
    - name: mariadb:latest
  variables:
    TEST: test
    MARIADB_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD}
    MARIADB_DATABASE: spotify
  before_script:
    - export DB_HOST=mariadb
    - export DATABASE=spotify
    - export DB_USER=${MARIADB_ROOT_PASSWORD}
    - export DB_PASSWORD=${MARIADB_ROOT_PASSWORD}
    - sleep 10
  script:
    - python3 manage.py test

DockerBuild:
  stage: build
  image: docker:latest
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  services:
    - name: docker:dind
      alias: docker
      command: ["--tls=false"]
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH || true
    - docker build --network host --cache-from $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH

DeployKubernetes:
  stage: deploy
  image: ${IMAGE}
  environment: production
  only:
    - develop
    - production
  script:
    - kubectl apply -f kubernetes/namespace.yaml

    - sed -i "s,<IMAGE>,${CI_REGISTRY_IMAGE},g" kubernetes/deployment.yaml
    - sed -i "s/<VERSION>/${CI_COMMIT_SHA}/g" kubernetes/deployment.yaml
    - kubectl apply -f kubernetes/deployment.yaml

    - CLIENT_ID=$(echo -n ${CLIENT_ID} | base64 -w 0 | tr -d \\n)
    - CLIENT_SECRET=$(echo -n ${CLIENT_SECRET} | base64 -w 0 | tr -d \\n)
    - REDIRECT_URL=$(echo -n ${REDIRECT_URL} | base64 -w 0 | tr -d \\n)
    - DB_HOST=$(echo -n ${DB_HOST} | base64 -w 0 | tr -d \\n)
    - DATABASE=$(echo -n ${DATABASE} | base64 -w 0 | tr -d \\n)
    - DB_USER=$(echo -n ${DB_USER} | base64 -w 0 | tr -d \\n)
    - DB_PASSWORD=$(echo -n ${DB_PASSWORD} | base64 -w 0 | tr -d \\n)

    - sed -i "s,<CLIENT_ID>,${CLIENT_ID},g" kubernetes/secret.yaml
    - sed -i "s/<CLIENT_SECRET>/${CLIENT_SECRET}/g" kubernetes/secret.yaml
    - sed -i "s,<REDIRECT_URL>,${REDIRECT_URL},g" kubernetes/secret.yaml
    - sed -i "s,<DB_HOST>,${DB_HOST},g" kubernetes/secret.yaml
    - sed -i "s,<DATABASE>,${DATABASE},g" kubernetes/secret.yaml
    - sed -i "s,<DB_USER>,${DB_USER},g" kubernetes/secret.yaml
    - sed -i "s,<DB_PASSWORD>,${DB_PASSWORD},g" kubernetes/secret.yaml
    - kubectl apply -f kubernetes/secret.yaml

    - kubectl apply -f kubernetes/service.yaml

    - sed -i "s/<URL>/${URL}/g" kubernetes/traefik.yaml
    - kubectl apply -f kubernetes/traefik.yaml

    - kubectl apply -f kubernetes/limitRange.yaml
    - kubectl apply -f kubernetes/resourceQuota.yaml
