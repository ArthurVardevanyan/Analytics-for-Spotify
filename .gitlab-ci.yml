# WIP, TESTING ONLY, DO NOT DEPLOY
include:
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml

variables:
  SCAN_KUBERNETES_MANIFESTS: "true"

stages:
  - test
  - build
  - push
  - deploy

PythonTests:
  stage: test
  image: python:3.9-slim
  services:
    - name: mariadb:latest
  variables:
    TEST: test
    MARIADB_ROOT_PASSWORD: root
    MARIADB_DATABASE: spotify
  before_script:
    - |
      echo "[client]
      host = mariadb
      database = spotify
      user = root
      password = root
      default-character-set = utf8"> AnalyticsforSpotify/my.cnf
    - apt-get update
    - apt-get install -y libmariadb-dev gcc
    - python -m pip install --upgrade pip
    - pip3 install -r requirements.txt
  script:
    - python3 manage.py test

DockerBuild:
  stage: build
  image: docker:latest
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  services:
    - name: docker:dind
      alias: docker
      command: ["--tls=false"]
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH || true
    - docker build --network host --cache-from $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

PushProduction:
  stage: push
  image: docker:latest
  variables:
    GIT_STRATEGY: none
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  services:
    - name: docker:dind
      alias: docker
      command: ["--tls=false"]
  only:
    - production
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH

PushDevelop:
  stage: push
  image: docker:latest
  variables:
    GIT_STRATEGY: none
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  services:
    - name: docker:dind
      alias: docker
      command: ["--tls=false"]
  only:
    - develop
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH

DeployKubernetes:
  stage: deploy
  image: ${IMAGE}
  environment: production
  only:
    - develop
    - production
  script:
    - sed -i "s,<IMAGE>,${CI_REGISTRY_IMAGE},g" kubernetes/deployment.yaml
    - sed -i "s/<VERSION>/${CI_COMMIT_SHA}/g" kubernetes/deployment.yaml
    - kubectl apply -f kubernetes/deployment.yaml

    - sed -i "s,<CLIENT_ID>,${CLIENT_ID},g" kubernetes/configmap.yaml
    - sed -i "s/<CLIENT_SECRET>/${CLIENT_SECRET}/g" kubernetes/configmap.yaml
    - sed -i "s,<REDIRECT_URL>,${REDIRECT_URL},g" kubernetes/configmap.yaml
    - sed -i "s,<HOST>,${HOST},g" kubernetes/configmap.yaml
    - sed -i "s,<DATABASE>,${DATABASE},g" kubernetes/configmap.yaml
    - sed -i "s,<USER>,${USER},g" kubernetes/configmap.yaml
    - sed -i "s,<PASSWORD>,${PASSWORD},g" kubernetes/configmap.yaml
    - kubectl apply -f kubernetes/configmap.yaml

    - kubectl apply -f kubernetes/service.yaml

    - sed -i "s/<URL>/${URL}/g" kubernetes/traefik.yaml
    - kubectl apply -f kubernetes/traefik.yaml
