apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: unit-test
  namespace: analytics-for-spotify
spec:
  workspaces:
    - name: data

  sidecars:
    - image: mariadb:10.11.7
      name: mariadb
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
        privileged: false
        readOnlyRootFilesystem: true
        allowPrivilegeEscalation: false
        # seccompProfile:
        #   type: RuntimeDefault
        capabilities:
          drop:
            - MKNOD
            - ALL
      resources:
        requests:
          memory: 192Mi
          cpu: 100m
        limits:
          memory: 384Mi
          cpu: 300m
      ports:
        - containerPort: 3306
      env:
        - name: MARIADB_ROOT_PASSWORD
          value: spotify
        - name: MARIADB_DATABASE
          value: spotify
      volumeMounts:
        - name: mysql
          mountPath: /var/lib/mysql/
        - name: tmp
          mountPath: /tmp
        - name: run-mysqld
          mountPath: /run/mysqld
  steps:
    - name: unit-test
      image: "registry.arthurvardevanyan.com/apps/analytics-for-spotify:base"
      resources:
        requests:
          memory: 192Mi
          cpu: 100m
        limits:
          memory: 384Mi
          cpu: 300m
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
        privileged: false
        readOnlyRootFilesystem: true
        allowPrivilegeEscalation: false
        # seccompProfile:
        #   type: RuntimeDefault
        capabilities:
          drop:
            - MKNOD
            - ALL
      env:
        - name: WORKSPACE_DATA_PATH
          value: $(workspaces.data.path)
        - name: DB_HOST
          value: "127.0.0.1"
        - name: DATABASE
          value: spotify
        - name: DB_USER
          value: root
        - name: DB_PASSWORD
          value: spotify
        - name: TEST
          value: test
      volumeMounts:
        - name: cache
          mountPath: /.cache/
          subPath: .cache
        - name: cache
          mountPath: /.local/
          subPath: .local
      script: |
        #!/bin/bash

        set -o errexit
        set -o nounset
        set -o pipefail

        retry() {
          local MAX_TRIES
          local DELAY=0
          local ADD_DELAY=60
          MAX_TRIES="${1}"

          shift 1
          for i in $(seq 0 "${MAX_TRIES}"); do
            if [[ "${i}" -eq "${MAX_TRIES}" ]]; then
              break
            fi
            { "${@}" && return 0; } || true
            echo "Failed, retrying...($((i + 1)) of ${MAX_TRIES})"
            DELAY=$((DELAY + ADD_DELAY))
            echo "$(date -u --rfc-3339=seconds) - Waiting ${DELAY} seconds... "
            sleep "${DELAY}"
          done
          local CMD="'$*'"
          echo "Command $CMD failed."
          false
        }


        echo "Waiting for Database to Start"
        #sleep 15
        cd $(workspaces.data.path)

        python3 -m pip install -r requirements.txt --break-system-packages

        python3 -m venv .venv && \
        source .venv/bin/activate && \
        python3 -m pip install -r requirements.txt

        test() {
          coverage run --source='./monitoringBackend,./webBackend'  manage.py test
          coverage report -m
        }
        retry 5 test
  volumes:
    - name: mysql
      emptyDir:
        sizeLimit: 200Mi
    - name: tmp
      emptyDir:
        sizeLimit: 1Mi
    - name: run-mysqld
      emptyDir:
        sizeLimit: 1Mi
    - name: cache
      persistentVolumeClaim:
        claimName: cache
